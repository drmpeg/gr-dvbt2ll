/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(dvbt2ll_config.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(4b0ce974999eb7b4c547e6b0df747260)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <dvbt2ll/dvbt2ll_config.h>
// pydoc.h is automatically generated in the build directory
#include <dvbt2ll_config_pydoc.h>

void bind_dvbt2ll_config(py::module& m)
{


    py::enum_<::gr::dvbt2ll::dvbt2_code_rate_t>(m,"dvbt2_code_rate_t")
        .value("C1_2", ::gr::dvbt2ll::C1_2) // 0
        .value("C3_5", ::gr::dvbt2ll::C3_5) // 1
        .value("C2_3", ::gr::dvbt2ll::C2_3) // 2
        .value("C3_4", ::gr::dvbt2ll::C3_4) // 3
        .value("C4_5", ::gr::dvbt2ll::C4_5) // 4
        .value("C5_6", ::gr::dvbt2ll::C5_6) // 5
        .value("C1_3", ::gr::dvbt2ll::C1_3) // 6
        .value("C2_5", ::gr::dvbt2ll::C2_5) // 7
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_code_rate_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_constellation_t>(m,"dvbt2_constellation_t")
        .value("MOD_QPSK", ::gr::dvbt2ll::MOD_QPSK) // 0
        .value("MOD_16QAM", ::gr::dvbt2ll::MOD_16QAM) // 1
        .value("MOD_64QAM", ::gr::dvbt2ll::MOD_64QAM) // 2
        .value("MOD_256QAM", ::gr::dvbt2ll::MOD_256QAM) // 3
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_constellation_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_rotation_t>(m,"dvbt2_rotation_t")
        .value("ROTATION_OFF", ::gr::dvbt2ll::ROTATION_OFF) // 0
        .value("ROTATION_ON", ::gr::dvbt2ll::ROTATION_ON) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_rotation_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_framesize_t>(m,"dvbt2_framesize_t")
        .value("FECFRAME_SHORT", ::gr::dvbt2ll::FECFRAME_SHORT) // 0
        .value("FECFRAME_NORMAL", ::gr::dvbt2ll::FECFRAME_NORMAL) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_framesize_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_streamtype_t>(m,"dvbt2_streamtype_t")
        .value("STREAMTYPE_TS", ::gr::dvbt2ll::STREAMTYPE_TS) // 0
        .value("STREAMTYPE_GS", ::gr::dvbt2ll::STREAMTYPE_GS) // 1
        .value("STREAMTYPE_BOTH", ::gr::dvbt2ll::STREAMTYPE_BOTH) // 2
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_streamtype_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_inputmode_t>(m,"dvbt2_inputmode_t")
        .value("INPUTMODE_NORMAL", ::gr::dvbt2ll::INPUTMODE_NORMAL) // 0
        .value("INPUTMODE_HIEFF", ::gr::dvbt2ll::INPUTMODE_HIEFF) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_inputmode_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_extended_carrier_t>(m,"dvbt2_extended_carrier_t")
        .value("CARRIERS_NORMAL", ::gr::dvbt2ll::CARRIERS_NORMAL) // 0
        .value("CARRIERS_EXTENDED", ::gr::dvbt2ll::CARRIERS_EXTENDED) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_extended_carrier_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_preamble_t>(m,"dvbt2_preamble_t")
        .value("PREAMBLE_T2_SISO", ::gr::dvbt2ll::PREAMBLE_T2_SISO) // 0
        .value("PREAMBLE_T2_MISO", ::gr::dvbt2ll::PREAMBLE_T2_MISO) // 1
        .value("PREAMBLE_NON_T2", ::gr::dvbt2ll::PREAMBLE_NON_T2) // 2
        .value("PREAMBLE_T2_LITE_SISO", ::gr::dvbt2ll::PREAMBLE_T2_LITE_SISO) // 3
        .value("PREAMBLE_T2_LITE_MISO", ::gr::dvbt2ll::PREAMBLE_T2_LITE_MISO) // 4
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_preamble_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_fftsize_t>(m,"dvbt2_fftsize_t")
        .value("FFTSIZE_2K", ::gr::dvbt2ll::FFTSIZE_2K) // 0
        .value("FFTSIZE_8K", ::gr::dvbt2ll::FFTSIZE_8K) // 1
        .value("FFTSIZE_4K", ::gr::dvbt2ll::FFTSIZE_4K) // 2
        .value("FFTSIZE_1K", ::gr::dvbt2ll::FFTSIZE_1K) // 3
        .value("FFTSIZE_16K", ::gr::dvbt2ll::FFTSIZE_16K) // 4
        .value("FFTSIZE_32K", ::gr::dvbt2ll::FFTSIZE_32K) // 5
        .value("FFTSIZE_8K_T2GI", ::gr::dvbt2ll::FFTSIZE_8K_T2GI) // 6
        .value("FFTSIZE_32K_T2GI", ::gr::dvbt2ll::FFTSIZE_32K_T2GI) // 7
        .value("FFTSIZE_16K_T2GI", ::gr::dvbt2ll::FFTSIZE_16K_T2GI) // 11
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_fftsize_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_guardinterval_t>(m,"dvbt2_guardinterval_t")
        .value("GI_1_32", ::gr::dvbt2ll::GI_1_32) // 0
        .value("GI_1_16", ::gr::dvbt2ll::GI_1_16) // 1
        .value("GI_1_8", ::gr::dvbt2ll::GI_1_8) // 2
        .value("GI_1_4", ::gr::dvbt2ll::GI_1_4) // 3
        .value("GI_1_128", ::gr::dvbt2ll::GI_1_128) // 4
        .value("GI_19_128", ::gr::dvbt2ll::GI_19_128) // 5
        .value("GI_19_256", ::gr::dvbt2ll::GI_19_256) // 6
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_guardinterval_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_papr_t>(m,"dvbt2_papr_t")
        .value("PAPR_OFF", ::gr::dvbt2ll::PAPR_OFF) // 0
        .value("PAPR_ACE", ::gr::dvbt2ll::PAPR_ACE) // 1
        .value("PAPR_TR", ::gr::dvbt2ll::PAPR_TR) // 2
        .value("PAPR_BOTH", ::gr::dvbt2ll::PAPR_BOTH) // 3
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_papr_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_l1constellation_t>(m,"dvbt2_l1constellation_t")
        .value("L1_MOD_BPSK", ::gr::dvbt2ll::L1_MOD_BPSK) // 0
        .value("L1_MOD_QPSK", ::gr::dvbt2ll::L1_MOD_QPSK) // 1
        .value("L1_MOD_16QAM", ::gr::dvbt2ll::L1_MOD_16QAM) // 2
        .value("L1_MOD_64QAM", ::gr::dvbt2ll::L1_MOD_64QAM) // 3
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_l1constellation_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_pilotpattern_t>(m,"dvbt2_pilotpattern_t")
        .value("PILOT_PP1", ::gr::dvbt2ll::PILOT_PP1) // 0
        .value("PILOT_PP2", ::gr::dvbt2ll::PILOT_PP2) // 1
        .value("PILOT_PP3", ::gr::dvbt2ll::PILOT_PP3) // 2
        .value("PILOT_PP4", ::gr::dvbt2ll::PILOT_PP4) // 3
        .value("PILOT_PP5", ::gr::dvbt2ll::PILOT_PP5) // 4
        .value("PILOT_PP6", ::gr::dvbt2ll::PILOT_PP6) // 5
        .value("PILOT_PP7", ::gr::dvbt2ll::PILOT_PP7) // 6
        .value("PILOT_PP8", ::gr::dvbt2ll::PILOT_PP8) // 7
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_pilotpattern_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_version_t>(m,"dvbt2_version_t")
        .value("VERSION_111", ::gr::dvbt2ll::VERSION_111) // 0
        .value("VERSION_121", ::gr::dvbt2ll::VERSION_121) // 1
        .value("VERSION_131", ::gr::dvbt2ll::VERSION_131) // 2
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_version_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_reservedbiasbits_t>(m,"dvbt2_reservedbiasbits_t")
        .value("RESERVED_OFF", ::gr::dvbt2ll::RESERVED_OFF) // 0
        .value("RESERVED_ON", ::gr::dvbt2ll::RESERVED_ON) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_reservedbiasbits_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_l1scrambled_t>(m,"dvbt2_l1scrambled_t")
        .value("L1_SCRAMBLED_OFF", ::gr::dvbt2ll::L1_SCRAMBLED_OFF) // 0
        .value("L1_SCRAMBLED_ON", ::gr::dvbt2ll::L1_SCRAMBLED_ON) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_l1scrambled_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_misogroup_t>(m,"dvbt2_misogroup_t")
        .value("MISO_TX1", ::gr::dvbt2ll::MISO_TX1) // 0
        .value("MISO_TX2", ::gr::dvbt2ll::MISO_TX2) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_misogroup_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_showlevels_t>(m,"dvbt2_showlevels_t")
        .value("SHOWLEVELS_OFF", ::gr::dvbt2ll::SHOWLEVELS_OFF) // 0
        .value("SHOWLEVELS_ON", ::gr::dvbt2ll::SHOWLEVELS_ON) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_showlevels_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_inband_t>(m,"dvbt2_inband_t")
        .value("INBAND_OFF", ::gr::dvbt2ll::INBAND_OFF) // 0
        .value("INBAND_ON", ::gr::dvbt2ll::INBAND_ON) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_inband_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_equalization_t>(m,"dvbt2_equalization_t")
        .value("EQUALIZATION_OFF", ::gr::dvbt2ll::EQUALIZATION_OFF) // 0
        .value("EQUALIZATION_ON", ::gr::dvbt2ll::EQUALIZATION_ON) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_equalization_t>();
    py::enum_<::gr::dvbt2ll::dvbt2_bandwidth_t>(m,"dvbt2_bandwidth_t")
        .value("BANDWIDTH_1_7_MHZ", ::gr::dvbt2ll::BANDWIDTH_1_7_MHZ) // 0
        .value("BANDWIDTH_5_0_MHZ", ::gr::dvbt2ll::BANDWIDTH_5_0_MHZ) // 1
        .value("BANDWIDTH_6_0_MHZ", ::gr::dvbt2ll::BANDWIDTH_6_0_MHZ) // 2
        .value("BANDWIDTH_7_0_MHZ", ::gr::dvbt2ll::BANDWIDTH_7_0_MHZ) // 3
        .value("BANDWIDTH_8_0_MHZ", ::gr::dvbt2ll::BANDWIDTH_8_0_MHZ) // 4
        .value("BANDWIDTH_10_0_MHZ", ::gr::dvbt2ll::BANDWIDTH_10_0_MHZ) // 5
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::dvbt2ll::dvbt2_bandwidth_t>();



}








